
import telebot
import time
import cloudpickle

import json
from datetime import datetime
import psycopg2
from psycopg2 import sql

from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
try:
    # –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

    bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
    print("–¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω")
except:
    print("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –í–≤–µ–¥–∏—Ç–µ –¢–æ–∫–µ–Ω –±–æ—Ç–∞:")
    bot = telebot.TeleBot(input()) # –≤ TOKEN –º—ã –≤–≤–æ–¥–∏–º —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤ Telegram

#stats = {} —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

# –∏–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞ —Å –º–æ–¥–µ–ª—å—é

with open('model.pkl', 'rb') as f:
    model_pipeline = cloudpickle.load(f)

@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫—Å–∏—á–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞. –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ.")



@bot.message_handler(commands=['help'])
def help(message):
    bot.reply_to(message, "–Ø - –±–æ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫—Å–∏—á–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞. –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é —Ç–æ–∫—Å–∏—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –≤–µ–¥–µ—Ç —Å–µ–±—è —Å–ª–∏—à–∫–æ–º —Ç–æ–∫—Å–∏—á–Ω–æ, —è –≤—Ä–µ–º–µ–Ω–Ω–æ –ª–∏—à–∞—é –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç. –£ –º–µ–Ω—è –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä—É—á–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏: /mute - –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n/unmute - —Ä–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

def log_message(user_id, username, message, is_toxic):
    log_entry = {
        "timestamp": datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        "user_id": user_id,
        "username": username,
        "message": message,
        "is_toxic": is_toxic
    }

    # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, log.json)
    with open("log.json", "a" , encoding = 'utf-8') as log_file:
        log_file.write(json.dumps(log_entry, ensure_ascii = False) + "\n")


def save_user(user_id, username, is_toxic):
    try:
        conn = psycopg2.connect(
            dbname=os.getenv("DB_NAME"),
            user=os.getenv("USER"),
            password=os.getenv("PASSWORD"),
            host=os.getenv("HOST"),
            port=os.getenv("PORT")
        )
        cursor = conn.cursor()
        print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

    except psycopg2.OperationalError as e:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        print("–û—à–∏–±–∫–∞:", e)

    cursor.execute("SELECT toxic_count FROM users WHERE user_id = %s", (user_id,))
    result = cursor.fetchone()

    if result:
        if is_toxic:
            new_count = int(result[0] + 1)
            cursor.execute("UPDATE users SET toxic_count = %s WHERE user_id = %s", (new_count, user_id,))
    '''else:
        toxic_count = 1 if is_toxic else 0
        cursor.execute(
            "INSERT INTO users (user_id, username, toxic_count) VALUES (%s,%s,%s)", (user_id, username, toxic_count,)
        )'''

    conn.commit()
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    cursor.close()
    conn.close()

'''@bot.message_handler(commands=['kick'])
def kick_user(message):
    if message.reply_to_message:
        chat_id = message.chat.id
        user_id = message.reply_to_message.from_user.id
        user_status = bot.get_chat_member(chat_id, user_id).status
        if user_status == 'administrator' or user_status == 'creator':
            bot.reply_to(message, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫–∏–∫–Ω—É—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        else:
            bot.kick_chat_member(chat_id, user_id)
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.username} –±—ã–ª –∫–∏–∫–Ω—É—Ç.")
    else:
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–∏–∫–Ω—É—Ç—å.")
'''

@bot.message_handler(commands=['mute'])
def mute_user(message):
    #if message.reply_to_message:
        chat_id = message.chat.id
        user_id = message.from_user.id
        user_status = bot.get_chat_member(chat_id, user_id).status

        if user_status == 'administrator' or user_status == 'creator':
            bot.reply_to(message, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        else:
            duration = 60 # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 1 –º–∏–Ω—É—Ç–∞

            bot.restrict_chat_member(chat_id, user_id, until_date=time.time()+duration)
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥.")
    #else:
        #bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å.")


@bot.message_handler(commands=['unmute'])
def unmute_user(message):
    if message.reply_to_message:
        chat_id = message.chat.id
        user_id = message.reply_to_message.from_user.id
        bot.restrict_chat_member(chat_id, user_id, can_send_messages=True, can_send_media_messages=True, can_send_other_messages=True, can_add_web_page_previews=True)
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.username} —Ä–∞–∑–º—É—á–µ–Ω.")
    else:
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º—É—Ç–∏—Ç—å.")

'''@bot.message_handler(commands=['stats'])
def chat_stats(message):
    chat_id = message.chat.id
    if chat_id not in stats:
        bot.reply_to(message, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ –ø—É—Å—Ç–∞.")
    else:
        total_messages = stats[chat_id]['total_messages']
        unique_users = len(stats[chat_id]['users'])
        bot.reply_to(message, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:\n–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}")


@bot.message_handler(commands=['selfstat'])
def user_stats(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = message.from_user.username
    if chat_id not in stats:
        bot.reply_to(message, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ –ø—É—Å—Ç–∞.")
    else:
        if user_id not in stats[chat_id]['users']:
            bot.reply_to(message, "–í—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        else:
            user_messages = stats[chat_id]['users'][user_id]['messages']
            total_messages = stats[chat_id]['total_messages']
            percentage = round(user_messages / total_messages * 100, 2)
            bot.reply_to(message, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}:\n–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {user_messages}\n–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {percentage}%")
'''
@bot.message_handler(func = lambda message :not message.text.startswith('/'))
def predict(message):
    # –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    print('–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞')
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏
    prediction = int((model_pipeline.predict([message.text])))
    if prediction == 1:
        is_toxic = True
        bot.reply_to(message,f'–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ç–æ–∫—Å–∏—á–µ–Ω. –ù–µ –¥–µ–ª–∞–π—Ç–µ —Ç–∞–∫ –±–æ–ª—å—à–µüò•')
        mute_user(message)
        log_message(message.from_user.id, message.from_user.username, message.text, is_toxic)
        save_user(message.from_user.id, message.from_user.username, is_toxic)
        '''is_muted = save_user(message.from_user.id, message.from_user.username, True)
      if is_muted:
          bot.reply_to(message, '–í—ã –±—ã–ª–∏ –∑–∞–º—É—á–µ–Ω—ã –∑–∞ —Ç–æ–∫—Å–∏—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.')'''
    else:
        is_toxic = False
        bot.reply_to(message,f'–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ —Ç–æ–∫—Å–∏—á–µ–Ω. –í—ã –º–æ–ª–æ–¥–µ—Ü!üòÅ')
        log_message(message.from_user.id, message.from_user.username, message.text, is_toxic)
        save_user(message.from_user.id, message.from_user.username, is_toxic)



bot.polling(none_stop=True, interval=0)